{"version":3,"sources":["api/api.ts","store/changePosts.ts","api/posts.ts","store/selectPost.ts","store/showPostDetails.ts","components/PostsList/PostsList.tsx","store/showComments.ts","api/comments.ts","components/CommentForm/CommentForm.tsx","components/PostDetails/PostDetails.tsx","store/selectUser.ts","components/UserSelect/UserSelect.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","request","url","options","fetch","then","res","json","SET_POSTS","SET_USER_POSTS","setPosts","dispatch","receivedFromServerPosts","type","payload","setUserPosts","userSelect","userId","receivedFromServerUserPosts","initialState","posts","reducer","state","action","SELECTED_POST","setSelectPost","postId","selectedPost","SET_POST_DETAILS","CLOSE_POST_DETAILS","setPostDetails","receivedFromServerPostDetails","postDetails","id","createdAt","updatedAt","title","body","PostsList","useDispatch","useSelector","changePosts","selectedUser","selectUser","selectPost","handleSetSelectedPostId","event","preventDefault","useEffect","className","map","onClick","SET_COMMENTS","DELETE_COMMENT","ADD_COMMENT","setComments","getPostComments","receivedFromServerPostComments","deleteComment","commentId","method","deletePostComments","addComment","comment","onSuccess","headers","JSON","stringify","addPostComment","comments","filter","initialComment","name","email","CommentForm","useState","setComment","changeFieldValue","target","value","prevComment","onSubmit","placeholder","onChange","PostDetails","showPostDetails","postBody","showComments","show","setShow","prev","length","SELECTED_USER","UserSelect","htmlFor","App","rootReducer","combineReducers","changePostsReducer","selectUserReducer","selectPostReducer","showPostDetailsReducer","showCommentsReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95d62177.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options: any = {}) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(res => res.json());\n};\n","import { AnyAction } from 'redux';\nimport { Dispatch } from 'react';\n\nimport { getPosts, getUserPosts } from '../api/posts';\n\nconst SET_POSTS = 'SET_POSTS';\nconst SET_USER_POSTS = 'SET_USER_POSTS';\n\nexport const setPosts = () => (dispatch: Dispatch<any>) => {\n  getPosts()\n    .then(receivedFromServerPosts => {\n      dispatch({\n        type: SET_POSTS,\n        payload: receivedFromServerPosts,\n      });\n    });\n};\n\nexport const setUserPosts = (userSelect: string) => (dispatch: Dispatch<any>) => {\n  getUserPosts(userSelect)\n    .then(receivedFromServerUserPosts => {\n      dispatch({\n        type: SET_USER_POSTS,\n        payload: receivedFromServerUserPosts,\n      });\n    });\n};\n\nconst initialState: PostState = {\n  posts: [],\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case SET_USER_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { request } from './api';\n\nexport const getPosts = () => request('/posts');\n\nexport const getUserPosts = (userId: string) => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = (postId: string) => request(`/posts/${postId}`);\n","import { AnyAction } from 'redux';\n\nconst SELECTED_POST = 'SELECTED_POST';\n\nexport const setSelectPost = (postId: number | null) => ({\n  type: SELECTED_POST,\n  payload: postId,\n});\n\nconst initialState: PostIdState = {\n  selectedPost: null,\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SELECTED_POST:\n      return {\n        ...state,\n        selectedPost: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { Dispatch } from 'react';\n\nimport { getPostDetails } from '../api/posts';\n\nconst SET_POST_DETAILS = 'SET_POST_DETAILS';\nconst CLOSE_POST_DETAILS = 'CLOSE_POST_DETAILS';\n\nexport const setPostDetails = (url: string) => (dispatch: Dispatch<any>) => {\n  getPostDetails(url)\n    .then(receivedFromServerPostDetails => {\n      dispatch({\n        type: SET_POST_DETAILS,\n        payload: receivedFromServerPostDetails,\n      });\n    });\n};\n\nexport const closePostDetails = () => ({ type: CLOSE_POST_DETAILS });\n\nconst initialState: PostDetailsState = {\n  postDetails: {\n    id: 0,\n    createdAt: '',\n    updatedAt: '',\n    userId: 0,\n    title: '',\n    body: '',\n  },\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST_DETAILS:\n      return {\n        ...state,\n        postDetails: action.payload,\n      };\n\n    case CLOSE_POST_DETAILS:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './PostsList.scss';\nimport { setPosts, setUserPosts } from '../../store/changePosts';\nimport { setSelectPost } from '../../store/selectPost';\nimport { closePostDetails, setPostDetails } from '../../store/showPostDetails';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { posts } = useSelector(({ changePosts }: any) => changePosts);\n  const { selectedUser } = useSelector(({ selectUser }: any) => selectUser);\n  const { selectedPost } = useSelector(({ selectPost }: any) => selectPost);\n\n  const handleSetSelectedPostId = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    postId = null,\n  ) => {\n    event.preventDefault();\n\n    dispatch(setSelectPost(postId));\n  };\n\n  useEffect(() => {\n    if (selectedUser === '0') {\n      dispatch(setPosts());\n    } else {\n      dispatch(setUserPosts(selectedUser));\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    if (selectedPost) {\n      dispatch(setPostDetails(`${selectedPost}`));\n    } else {\n      dispatch(closePostDetails());\n    }\n  }, [selectedPost]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(({ id, userId, title }: any) => (\n          <li\n            key={id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                [User #\n                {userId}\n                ]:\n              </b>\n              {title}\n            </div>\n            {selectedPost === id\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button active\"\n                  onClick={handleSetSelectedPostId}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={(event) => handleSetSelectedPostId(event, id)}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { AnyAction } from 'redux';\nimport { Dispatch } from 'react';\nimport { addPostComment, deletePostComments, getPostComments } from '../api/comments';\n\nconst SET_COMMENTS = 'SET_COMMENTS';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\nconst ADD_COMMENT = 'ADD_COMMENT';\n\nexport const setComments = (postId: number) => (dispatch: Dispatch<any>) => {\n  getPostComments(postId)\n    .then(receivedFromServerPostComments => {\n      dispatch({\n        type: SET_COMMENTS,\n        payload: receivedFromServerPostComments,\n      });\n    });\n};\n\nexport const deleteComment = (commentId: number) => (dispatch: Dispatch<any>) => {\n  deletePostComments(commentId)\n    .then(() => {\n      dispatch({\n        type: DELETE_COMMENT,\n        payload: commentId,\n      });\n    });\n};\n\nexport const addComment = (comment: IComment, onSuccess: any) => (dispatch: Dispatch<any>) => {\n  addPostComment(comment)\n    .then(() => {\n      dispatch({\n        type: ADD_COMMENT,\n        payload: comment,\n      });\n\n      onSuccess();\n    });\n};\n\nconst initialState: CommentsState = {\n  comments: [],\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return {\n        ...state,\n        comments: action.payload,\n      };\n\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        comments: state.comments.filter((comment: any) => comment.id !== action.payload),\n      };\n\n    case ADD_COMMENT:\n      return {\n        ...state,\n        comments: [...state.comments, action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => request(`/comments?postId=${postId}`);\n\nexport const deletePostComments = (commentId: number) => request(`/comments/${commentId}`, { method: 'DELETE' });\n\nexport const addPostComment = (comment: IComment) => request('/comments', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8',\n  },\n  body: JSON.stringify(comment),\n});\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addComment } from '../../store/showComments';\nimport './CommentForm.scss';\n\ninterface Props {\n  postId: number,\n}\n\nconst initialComment = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nexport const CommentForm: React.FC<Props> = ({ postId }) => {\n  const dispatch = useDispatch();\n\n  const [comment, setComment] = useState(initialComment);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const onSuccess = () => setComment(initialComment);\n\n    dispatch(addComment({ postId, ...comment }, onSuccess));\n  };\n\n  const changeFieldValue = ({ target }: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = target;\n\n    setComment(prevComment => ({\n      ...prevComment,\n      [name]: value,\n    }));\n  };\n\n  useEffect(() => {\n    setComment(initialComment);\n  }, [postId]);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={comment.name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={changeFieldValue}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={comment.email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={changeFieldValue}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment.body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={changeFieldValue}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteComment, setComments } from '../../store/showComments';\nimport { CommentForm } from '../CommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { postDetails } = useSelector(({ showPostDetails }: any) => showPostDetails);\n\n  const { id: postId, body: postBody } = postDetails;\n\n  const { comments } = useSelector(({ showComments }: any) => showComments);\n\n  const [show, setShow] = useState(true);\n\n  useEffect(() => {\n    dispatch(setComments(postId));\n  }, [postId]);\n\n  const handleSetShow = () => {\n    setShow(prev => !prev);\n  };\n\n  const handleDeletePostComments = (commentId: number) => {\n    dispatch(deleteComment(commentId));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {postBody}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleSetShow}\n        >\n          {show ? 'Hide' : 'Show'}\n          {` ${comments.length} comments`}\n        </button>\n\n        {show && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(({ id, body }: any) => (\n              <li\n                key={id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handleDeletePostComments(id)}\n                >\n                  X\n                </button>\n                <p>\n                  {body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <CommentForm\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { AnyAction } from 'redux';\n\nconst SELECTED_USER = 'SELECTED_USER';\n\nexport const setSelectUser = (userId: string) => ({\n  type: SELECTED_USER,\n  payload: userId,\n});\n\nconst initialState: UserIdState = {\n  selectedUser: '0',\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SELECTED_USER:\n      return {\n        ...state,\n        selectedUser: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './UserSelect.scss';\nimport { setSelectUser } from '../../store/selectUser';\n\nexport const UserSelect: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { selectedUser } = useSelector(({ selectUser }: any) => selectUser);\n\n  const handleSetUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    event.preventDefault();\n\n    dispatch(setSelectUser(event.target.value));\n  };\n\n  return (\n    <label htmlFor=\"user\">\n      Select a user: &nbsp;\n\n      <select\n        className=\"user-selector\"\n        id=\"user\"\n        value={selectedUser}\n        onChange={handleSetUserSelect}\n      >\n        <option value=\"0\">All users</option>\n        <option value=\"1\">Leanne Graham</option>\n        <option value=\"2\">Ervin Howell</option>\n        <option value=\"3\">Clementine Bauch</option>\n        <option value=\"4\">Patricia Lebsack</option>\n        <option value=\"5\">Chelsey Dietrich</option>\n        <option value=\"6\">Mrs. Dennis Schulist</option>\n        <option value=\"7\">Kurtis Weissnat</option>\n        <option value=\"8\">Nicholas Runolfsdottir V</option>\n        <option value=\"9\">Glenna Reichert</option>\n        <option value=\"10\">Leanne Graham</option>\n      </select>\n    </label>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nconst App: React.FC = () => {\n  const { selectedPost } = useSelector(({ selectPost }: any) => selectPost);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPost\n            ? <PostDetails />\n            : 'Post not selected'}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport changePostsReducer from './changePosts';\nimport selectUserReducer from './selectUser';\nimport selectPostReducer from './selectPost';\nimport showPostDetailsReducer from './showPostDetails';\nimport showCommentsReducer from './showComments';\n\nconst rootReducer = combineReducers({\n  changePosts: changePostsReducer,\n  selectUser: selectUserReducer,\n  selectPost: selectPostReducer,\n  showPostDetails: showPostDetailsReducer,\n  showComments: showCommentsReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}